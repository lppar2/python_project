import json
import requests
import time
import urllib

from random import randint

from todohelp import DBHelper, PurchaseHelper


db = DBHelper()
pb = PurchaseHelper()

TOKEN = "5408578112:AAGOm3TXRAfV40XTt32hkT_NYiBA-dXMthI"
URL = "https://api.telegram.org/bot{}/".format(TOKEN)


def get_url(url):
    response = requests.get(url)
    content = response.content.decode("utf8")
    return content


def get_json_from_url(url):
    content = get_url(url)
    js = json.loads(content)
    return js


def get_updates(offset=None):
    url = URL + "getUpdates"
    if offset:
        url += "?offset={}".format(offset)
    js = get_json_from_url(url)
    return js


def get_last_update_id(updates):
    update_ids = []
    for update in updates["result"]:
        update_ids.append(int(update["update_id"]))
    return max(update_ids)


def handle_updates(updates):
    for update in updates["result"]:
        text = update["message"]["text"]
        chat = update["message"]["chat"]["id"]
        items = db.get_items(chat)
        purchases = pb.get_items(chat)

        if text == "/done":
            keyboard = build_keyboard(items)
            send_message("–í—ã–±–µ—Ä–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å", chat, keyboard)

        elif text == "/start":
            send_message(
                "–ü—Ä–∏–≤–µ—Çüíö –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–æ–º–Ω–∏—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –¥–µ–ª–∞ üêπ"
                "\n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                "\n\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞–ø–∏—à–∏ '/buy <–Ω–∞–∑–≤–∞–Ω–∏–µ>'"
                "\n–ù–∞–ø—Ä–∏–º–µ—Ä: /buy –º–æ–ª–æ–∫–æ"
                "\n\n–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –º–µ–Ω—é –∏–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help", chat)

        elif text == "/get":
            message = "\n".join(items)
            if message == "":
                send_message("–ö–∞–∂–µ—Ç—Å—è, —Ç—É—Ç –ø—É—Å—Ç–æ üêæ", chat)
            else:
                send_message("–°–ø–∏—Å–æ–∫ –¥–µ–ª: ", chat)
                send_message(message, chat)

        elif text == "/help":
            send_message("–ü–ª–∞–Ω—ã –∏ –∑–∞–¥–∞—á–∏ üìÉ:"
                         "\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                         "\n/done - —É–¥–∞–ª–∏—Ç—å —Å–¥–µ–ª–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É ‚úÖ"
                         "\n/get - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ‚ùì"
                         "\n/help - —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ üòä", chat)
            send_message("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ ‚úè:"
                         "\n/buy <–Ω–∞–∑–≤–∞–Ω–∏–µ> - –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ üçè"
                         "\n/bought - —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫ üçû"
                         "\n/show - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–∫–æ –ø–æ–∫—É–ø–æ–∫ üßÄ", chat)

        elif "/buy " in text:
            purchase = text.replace("/buy ", "")
            pb.add_item(purchase, chat)
            send_message("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ üõí", chat)

        elif text == "/bought":
            purchases = pb.get_items(chat)
            keyboard = build_keyboard(purchases)
            send_message("–í—ã–±–µ—Ä–∏ —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å", chat, keyboard)

        elif text == "/show":
            message = "\n".join(purchases)
            if message == "":
                send_message("–ö–∞–∂–µ—Ç—Å—è, —Ç—É—Ç –ø—É—Å—Ç–æ üêæ", chat)
            else:
                send_message("–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫: ", chat)
                send_message(message, chat)

        elif text.startswith("/"):
            continue

        elif text in items:
            db.delete_item(text, chat)
            items = db.get_items(chat)
            keyboard = build_keyboard(items)
            send_message("–ß—Ç–æ –µ—â–µ —É–∂–µ —Å–¥–µ–ª–∞–Ω–æ?", chat, keyboard)

        elif text in purchases:
            pb.delete_item(text, chat)
            purchases = pb.get_items(chat)
            keyboard = build_keyboard(purchases)
            send_message("–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ üçè", chat, keyboard)

        else:
            db.add_item(text, chat)
            items = db.get_items(chat)
            send_message("–¢–µ–ø–µ—Ä—å –≤ —Å–ø–∏—Å–∫–µ!", chat)
            question = randint(1, 9)
            if question == 1:
                send_message("–ß—Ç–æ –µ—â—ë?", chat)
            if question == 2:
                send_message("–ò –≤—Å—ë?", chat)
            if question == 3:
                send_message("–î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è?", chat)
            if question == 4:
                send_message("–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å?", chat)
            if question == 5:
                send_message("–ë–æ–ª—å—à–µ –∑–∞–¥–∞–Ω–∏–π!", chat)
            if question == 6:
                send_message("–ú–Ω–æ–≥–æ –¥–µ–ª...", chat)
            if question == 7:
                send_message("–ó–∞–¥–∞–Ω–∏–µ? –î–æ–±–∞–≤–∏–º!", chat)
            if question == 8:
                send_message("–ï—â—ë —á—Ç–æ-—Ç–æ –¥–ª—è –º–µ–Ω—è?", chat)


def get_last_chat_id_and_text(updates):
    num_updates = len(updates["result"])
    last_update = num_updates - 1
    text = updates["result"][last_update]["message"]["text"]
    chat_id = updates["result"][last_update]["message"]["chat"]["id"]
    return (text, chat_id)


def build_keyboard(items):
    keyboard = [[item] for item in items]
    reply_markup = {"keyboard": keyboard, "one_time_keyboard": True}
    return json.dumps(reply_markup)


def send_message(text, chat_id, reply_markup=None):
    text = urllib.parse.quote_plus(text)
    url = URL + "sendMessage?text={}&chat_id={}&parse_mode=Markdown".format(text, chat_id)

    if reply_markup:
        url += "&reply_markup={}".format(reply_markup)
    get_url(url)


def main():
    db.setup()
    pb.setup()

    last_update_id = None

    while True:
        updates = get_updates(last_update_id)
        if len(updates["result"]) > 0:
            last_update_id = get_last_update_id(updates) + 1
            handle_updates(updates)
        time.sleep(0.5)


if __name__ == '__main__':
    main()
